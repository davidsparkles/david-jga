{"version":3,"sources":["api/useData.ts","components/Challenges.tsx","components/GameHeader.tsx","components/Game.tsx","components/Lobby.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["data","gameId","gameTitle","totalReachedPoints","totalMaxPoints","challenges","title","description","maxPoints","reachedPoints","state","getData","a","Promise","resolve","Challenges","props","className","map","challenge","GameHeader","Game","useState","undefined","setData","error","setError","useEffect","Error","useData","match","params","Lobby","to","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAmDMA,EAAa,CACjBC,OAAQ,YACRC,UAAW,YACXC,mBAAoB,GACpBC,eAAgB,GAChBC,WApC8B,CAC9B,CACEC,MAAO,gBACPC,YAAa,2TACbC,UAAW,EACXC,cAAe,EACfC,MAAO,UAET,CACEJ,MAAO,cACPC,YAAa,2BACbC,UAAW,EACXC,cAAe,EACfC,MAAO,UAET,CACEJ,MAAO,cACPC,YAAa,2BACbC,UAAW,EACXC,cAAe,EACfC,MAAO,QAET,CACEJ,MAAO,cACPC,YAAa,2BACbC,UAAW,EACXC,cAAe,EACfC,MAAO,Y,SAYIC,E,8EAAf,WAAuBV,GAAvB,SAAAW,EAAA,+EACSC,QAAQC,QAAQd,IADzB,4C,uCCvDe,SAASe,EAAWC,GACjC,OACE,qBAAKC,UAAU,gBAAf,SACGD,EAAMX,WAAWa,KAAI,SAACC,GAAD,OACpB,sBAAKF,UAAS,uBAAkBE,EAAUT,OAA1C,UACE,sBAAKO,UAAU,kBAAf,UACE,qBAAKA,UAAU,iBAAf,SAAiCE,EAAUb,QAC3C,sBAAKW,UAAU,kBAAf,UACGE,EAAUV,cADb,MAC+BU,EAAUX,gBAG3C,qBAAKS,UAAU,uBAAf,SAAuCE,EAAUZ,sB,MCX5C,SAASa,EAAWJ,GACjC,OACE,sBAAKC,UAAU,aAAf,UACE,qBAAKA,UAAU,kBAAf,SAAkCD,EAAMhB,KAAKE,YACjD,sBAAKe,UAAU,mBAAf,UAAmCD,EAAMhB,KAAKG,mBAA9C,MAAqEa,EAAMhB,KAAKI,qBCFnE,SAASiB,EAAKL,GAA6D,IAAD,EAEvF,EHuDK,SAAiBf,GACtB,MAAwBqB,wBAA2BC,GAAnD,mBAAOvB,EAAP,KAAawB,EAAb,KACA,EAA0BF,wBAA0BC,GAApD,mBAAOE,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,qBAAU,WACM,MAAV1B,GACFuB,OAAQD,GACRG,EAAS,IAAIE,MAAM,sBAEnB,sBAAC,sBAAAhB,EAAA,2EAEGY,EAFH,SAEiBb,EAAQV,GAFzB,kCAGGyB,OAASH,GAHZ,gDAKGC,OAAQD,GACRG,EAAS,EAAD,IANX,wDAAD,KAUD,CAACzB,IAEG,CAAED,OAAMyB,SG5ESI,CADZ,UAAGb,EAAMc,aAAT,aAAG,EAAaC,OAAO9B,QAC3BD,EAAR,EAAQA,KAAMyB,EAAd,EAAcA,MAEd,OAAIA,EAAc,+CAAUA,KAChB,MAARzB,EAAqB,qDAGvB,sBAAKiB,UAAU,OAAf,UACI,cAAC,EAAD,CAAYjB,KAAMA,IAClB,cAAC,EAAD,CAAYK,WAAYL,EAAKK,gBCbtB,SAAS2B,EAAMhB,GAC5B,OACE,sBAAKC,UAAU,QAAf,4BAEI,uBACA,cAAC,IAAD,CAAMgB,GAAG,kBAAT,gCCSOC,MAXf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkB,KAAK,IAAIC,OAAK,EAACC,UAAWL,IACjC,cAAC,IAAD,CAAOG,KAAK,gBAAgBE,UAAWhB,UCGhCiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.67c99720.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport type ChallengeState = \"open\" | \"closed\" | \"hidden\";\n\nexport interface Challenge {\n  title: string;\n  description: string;\n  maxPoints: number;\n  reachedPoints: number;\n  state: ChallengeState;\n}\n\nexport interface Data {\n  gameId: string;\n  gameTitle: string;\n  totalReachedPoints: number;\n  totalMaxPoints: number;\n  challenges: Challenge[];\n}\n\nconst challenges: Challenge[] = [\n  {\n    title: \"Internatsquiz\",\n    description: \"David tritt gegen Max an. Jeder darf sich noch einen zweiten Mann w√§hlen. Es werden 9 Fragen gestellt. Das Team, dass zuerst auf den Buzzer haut, muss innerhalb von 5 Sekunden die richtige Antwort sagen. Falls diese falsch ist, hat das Gegnerteam noch 10 Sekunden um zu antworten. Wer mehr Punkte hat gewinnt.\",\n    maxPoints: 1,\n    reachedPoints: 1,\n    state: \"closed\",\n  },\n  {\n    title: \"Challenge 2\",\n    description: \"Lorem ipsum dolor senum.\",\n    maxPoints: 1,\n    reachedPoints: 0,\n    state: \"closed\",\n  },\n  {\n    title: \"Challenge 3\",\n    description: \"Lorem ipsum dolor senum.\",\n    maxPoints: 2,\n    reachedPoints: 0,\n    state: \"open\",\n  },\n  {\n    title: \"Challenge 4\",\n    description: \"Lorem ipsum dolor senum.\",\n    maxPoints: 1,\n    reachedPoints: 0,\n    state: \"closed\",\n  },\n];\n\nconst data: Data = {\n  gameId: \"david-jga\",\n  gameTitle: \"David JGA\",\n  totalReachedPoints: 12,\n  totalMaxPoints: 50,\n  challenges,\n};\n\nasync function getData(gameId: string): Promise<Data> {\n  return Promise.resolve(data);\n}\n\nexport function useData(gameId?: string): { data?: Data; error?: any } {\n  const [data, setData] = useState<Data | undefined>(undefined);\n  const [error, setError] = useState<any | undefined>(undefined);\n\n  useEffect(() => {\n    if (gameId == null) {\n      setData(undefined);\n      setError(new Error(\"GameId Not Given\"));\n    } else {\n      (async () => {\n        try {\n          setData(await getData(gameId));\n          setError(undefined);\n        } catch (err) {\n          setData(undefined);\n          setError(err);\n        }\n      })();\n    }\n  }, [gameId]);\n\n  return { data, error };\n}\n","import React from \"react\";\nimport { Challenge } from \"../api/useData\";\nimport \"./Challenges.css\";\n\nexport default function Challenges(props: { challenges: Challenge[] }): JSX.Element {\n  return (\n    <div className=\"challengeList\">\n      {props.challenges.map((challenge) => (\n        <div className={`challengeBox ${challenge.state}`}>\n          <div className=\"challengeHeader\">\n            <div className=\"challengeTitle\">{challenge.title}</div>\n            <div className=\"challengePoints\">\n              {challenge.reachedPoints} / {challenge.maxPoints}\n            </div>\n          </div>\n          <div className=\"challengeDescription\">{challenge.description}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Data } from \"../api/useData\";\nimport \"./GameHeader.css\";\n\nexport default function GameHeader(props: { data: Data }): JSX.Element {\n  return (\n    <div className=\"gameHeader\">\n      <div className=\"gameHeaderTitle\">{props.data.gameTitle}</div>\n  <div className=\"gameHeaderPoints\">{props.data.totalReachedPoints} / {props.data.totalMaxPoints}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { RouteChildrenProps } from \"react-router-dom\";\nimport { useData } from \"../api/useData\";\nimport Challenges from \"./Challenges\";\nimport GameHeader from \"./GameHeader\";\n\nexport default function Game(props: RouteChildrenProps<{ gameId: string }>): JSX.Element {\n  const gameId = props.match?.params.gameId;\n  const { data, error } = useData(gameId);\n\n  if (error) return <>Error: {error}</>;\n  if (data == null) return <>No Data Found</>;\n\n  return (\n    <div className=\"Game\">\n        <GameHeader data={data} />\n        <Challenges challenges={data.challenges} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Lobby(props: object): JSX.Element {\n  return (\n    <div className=\"Lobby\">\n        Create Game Now\n        <br />\n        <Link to=\"/game/david-jga\">Go to David JGA</Link>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Game from \"./components/Game\";\nimport Lobby from \"./components/Lobby\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Route path=\"/\" exact component={Lobby} />\n        <Route path=\"/game/:gameId\" component={Game} />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}