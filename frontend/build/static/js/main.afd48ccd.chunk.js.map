{"version":3,"sources":["api/useData.ts","components/Challenges.tsx","components/GameHeader.tsx","components/Game.tsx","components/Lobby.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getData","gameId","a","fetch","res","status","json","console","error","statusText","text","Error","Challenges","props","className","challenges","map","challenge","state","title","maxPoints","reachedPoints","description","GameHeader","data","gameTitle","totalReachedPoints","totalMaxPoints","Game","useState","undefined","setData","setError","useEffect","useData","match","params","Lobby","to","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAqBeA,E,8EAAf,WAAuBC,GAAvB,eAAAC,EAAA,sEACoBC,MAAM,aAAD,OAAcF,IADvC,UAEqB,OADbG,EADR,QAEUC,OAFV,yCAEiCD,EAAIE,QAFrC,aAGEC,QAAQC,MAAR,uBAA8BJ,EAAIC,OAAlC,YAA4CD,EAAIK,WAAhD,YAA8DL,EAAIM,SAC5D,IAAIC,MAAMP,EAAIK,YAJtB,4C,uCCjBe,SAASG,EAAWC,GACjC,OACE,qBAAKC,UAAU,gBAAf,SACGD,EAAME,WAAWC,KAAI,SAACC,GAAD,eACpB,sBAAKH,UAAS,uBAAkBG,EAAUC,OAA1C,UACE,sBAAKJ,UAAU,kBAAf,UACE,qBAAKA,UAAU,iBAAf,mBAAiCG,EAAUE,aAA3C,QAAoD,QACpD,qBAAKL,UAAU,kBAAf,SAEwB,WAApBG,EAAUC,MAAqBD,EAAUG,UAAzC,UAAwDH,EAAUI,cAAlE,cAAqFJ,EAAUG,gBAIrG,qBAAKN,UAAU,uBAAf,mBAAuCG,EAAUK,mBAAjD,QAAgE,gB,MCb3D,SAASC,EAAWV,GACjC,OACE,sBAAKC,UAAU,aAAf,UACE,qBAAKA,UAAU,kBAAf,SAAkCD,EAAMW,KAAKC,YACjD,sBAAKX,UAAU,mBAAf,UAAmCD,EAAMW,KAAKE,mBAA9C,MAAqEb,EAAMW,KAAKG,qBCFnE,SAASC,EAAKf,GAA6D,IAAD,EAEvF,EHoBK,SAAiBZ,GACtB,MAAwB4B,wBAA2BC,GAAnD,mBAAON,EAAP,KAAaO,EAAb,KACA,EAA0BF,wBAA0BC,GAApD,mBAAOtB,EAAP,KAAcwB,EAAd,KAmBA,OAjBAC,qBAAU,WACM,MAAVhC,GACF8B,OAAQD,GACRE,EAAS,IAAIrB,MAAM,sBAEnB,sBAAC,sBAAAT,EAAA,2EAEG6B,EAFH,SAEiB/B,EAAQC,GAFzB,kCAGG+B,OAASF,GAHZ,gDAKGC,OAAQD,GACRE,EAAS,EAAD,IANX,wDAAD,KAUD,CAAC/B,IAEG,CAAEuB,OAAMhB,SGzCS0B,CADZ,UAAGrB,EAAMsB,aAAT,aAAG,EAAaC,OAAOnC,QAC3BuB,EAAR,EAAQA,KAAMhB,EAAd,EAAcA,MAEd,OAAIA,EAAc,+CAAUA,KAChB,MAARgB,EAAqB,qDAGvB,sBAAKV,UAAU,OAAf,UACI,cAAC,EAAD,CAAYU,KAAMA,IAClB,cAAC,EAAD,CAAYT,WAAYS,EAAKT,gBCbtB,SAASsB,EAAMxB,GAC5B,OACE,sBAAKC,UAAU,QAAf,4BAEI,uBACA,cAAC,IAAD,CAAMwB,GAAG,kBAAT,gCCSOC,MAXf,WACE,OACE,qBAAKzB,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0B,KAAK,IAAIC,OAAK,EAACC,UAAWL,IACjC,cAAC,IAAD,CAAOG,KAAK,gBAAgBE,UAAWd,UCGhCe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.afd48ccd.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport type ChallengeState = \"open\" | \"closed\" | \"hidden\";\n\nexport interface Challenge {\n  title?: string;\n  description?: string;\n  maxPoints: number;\n  reachedPoints: number;\n  minClosed: number;\n  state: ChallengeState;\n}\n\nexport interface Data {\n  gameId: number;\n  gameTitle: string;\n  totalReachedPoints: number;\n  totalMaxPoints: number;\n  challenges: Challenge[];\n}\n\nasync function getData(gameId: string): Promise<Data> {\n  const res = await fetch(`/api/game/${gameId}`);\n  if (res.status === 200) return res.json();\n  console.error(`Fetch error: ${res.status} ${res.statusText} ${res.text()}`);\n  throw new Error(res.statusText);\n}\n\nexport function useData(gameId?: string): { data?: Data; error?: any } {\n  const [data, setData] = useState<Data | undefined>(undefined);\n  const [error, setError] = useState<any | undefined>(undefined);\n\n  useEffect(() => {\n    if (gameId == null) {\n      setData(undefined);\n      setError(new Error(\"GameId Not Given\"));\n    } else {\n      (async () => {\n        try {\n          setData(await getData(gameId));\n          setError(undefined);\n        } catch (err) {\n          setData(undefined);\n          setError(err);\n        }\n      })();\n    }\n  }, [gameId]);\n\n  return { data, error };\n}\n","import React from \"react\";\nimport { Challenge } from \"../api/useData\";\nimport \"./Challenges.css\";\n\nexport default function Challenges(props: { challenges: Challenge[] }): JSX.Element {\n  return (\n    <div className=\"challengeList\">\n      {props.challenges.map((challenge) => (\n        <div className={`challengeBox ${challenge.state}`}>\n          <div className=\"challengeHeader\">\n            <div className=\"challengeTitle\">{challenge.title ?? \"???\"}</div>\n            <div className=\"challengePoints\">\n              {\n                challenge.state === \"hidden\" ? challenge.maxPoints : `${challenge.reachedPoints} / ${challenge.maxPoints}`\n              }\n            </div>\n          </div>\n          <div className=\"challengeDescription\">{challenge.description ?? \"???\"}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Data } from \"../api/useData\";\nimport \"./GameHeader.css\";\n\nexport default function GameHeader(props: { data: Data }): JSX.Element {\n  return (\n    <div className=\"gameHeader\">\n      <div className=\"gameHeaderTitle\">{props.data.gameTitle}</div>\n  <div className=\"gameHeaderPoints\">{props.data.totalReachedPoints} / {props.data.totalMaxPoints}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { RouteChildrenProps } from \"react-router-dom\";\nimport { useData } from \"../api/useData\";\nimport Challenges from \"./Challenges\";\nimport GameHeader from \"./GameHeader\";\n\nexport default function Game(props: RouteChildrenProps<{ gameId: string }>): JSX.Element {\n  const gameId = props.match?.params.gameId;\n  const { data, error } = useData(gameId);\n\n  if (error) return <>Error: {error}</>;\n  if (data == null) return <>No Data Found</>;\n\n  return (\n    <div className=\"Game\">\n        <GameHeader data={data} />\n        <Challenges challenges={data.challenges} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Lobby(props: object): JSX.Element {\n  return (\n    <div className=\"Lobby\">\n        Create Game Now\n        <br />\n        <Link to=\"/game/david-jga\">Go to David JGA</Link>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Game from \"./components/Game\";\nimport Lobby from \"./components/Lobby\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Route path=\"/\" exact component={Lobby} />\n        <Route path=\"/game/:gameId\" component={Game} />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}