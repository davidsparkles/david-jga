{"version":3,"sources":["components/ChallengeEditor.tsx","api/useData.ts","components/Challenges.tsx","components/GameHeader.tsx","components/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChallengeEditor","props","className","getData","gameId","a","console","log","window","location","hostname","fetch","res","status","json","error","statusText","text","Error","Challenges","challenges","map","challenge","index","state","title","maxPoints","reachedPoints","description","GameHeader","data","gameTitle","totalReachedPoints","totalMaxPoints","Game","useState","undefined","setData","setError","useEffect","useData","JSON","stringify","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAGe,SAASA,EAAgBC,GACtC,OAAO,qBAAKC,UAAU,OAAf,e,2CCiBMC,E,8EAAf,WAAuBC,GAAvB,eAAAC,EAAA,6DACEC,QAAQC,IAAR,UAA4C,cAA7BC,OAAOC,SAASC,SAA2B,wBAA0B,GAApF,qBAAmGN,IADrG,SAEoBO,MAAM,GAAD,OAAiC,cAA7BH,OAAOC,SAASC,SAA2B,wBAA0B,GAAzE,qBAAwFN,IAFjH,UAGqB,OADbQ,EAFR,QAGUC,OAHV,yCAGiCD,EAAIE,QAHrC,aAIER,QAAQS,MAAR,uBAA8BH,EAAIC,OAAlC,YAA4CD,EAAII,WAAhD,YAA8DJ,EAAIK,SAC5D,IAAIC,MAAMN,EAAII,YALtB,4C,4BCjBe,SAASG,EAAWlB,GACjC,OACE,qBAAKC,UAAU,gBAAf,SACGD,EAAMmB,WAAWC,KAAI,SAACC,EAAWC,GAAZ,eACpB,sBAAiBrB,UAAS,uBAAkBoB,EAAUE,OAAtD,UACE,sBAAKtB,UAAU,kBAAf,UACE,qBAAKA,UAAU,iBAAf,mBAAiCoB,EAAUG,aAA3C,QAAoD,QACpD,qBAAKvB,UAAU,kBAAf,SAEwB,WAApBoB,EAAUE,MAAqBF,EAAUI,UAAzC,UAAwDJ,EAAUK,cAAlE,cAAqFL,EAAUI,gBAIrG,qBAAKxB,UAAU,uBAAf,mBAAuCoB,EAAUM,mBAAjD,QAAgE,UATxDL,Q,MCJH,SAASM,EAAW5B,GACjC,OACE,sBAAKC,UAAU,aAAf,UACE,qBAAKA,UAAU,kBAAf,SAAkCD,EAAM6B,KAAKC,YACjD,sBAAK7B,UAAU,mBAAf,UAAmCD,EAAM6B,KAAKE,mBAA9C,MAAqE/B,EAAM6B,KAAKG,qBCHnE,SAASC,EAAKjC,GAC3B,IACA,EHsBK,SAAiBG,GACtB,MAAwB+B,wBAA2BC,GAAnD,mBAAON,EAAP,KAAaO,EAAb,KACA,EAA0BF,wBAA0BC,GAApD,mBAAOrB,EAAP,KAAcuB,EAAd,KAoBA,OAlBAC,qBAAU,WACM,MAAVnC,GACFiC,OAAQD,GACRE,EAAS,IAAIpB,MAAM,sBAEnB,sBAAC,sBAAAb,EAAA,2EAEGgC,EAFH,SAEiBlC,EAAQC,GAFzB,kCAGGkC,OAASF,GAHZ,gDAKG9B,QAAQC,IAAR,MACA8B,OAAQD,GACRE,EAAS,cAPZ,wDAAD,KAWD,CAAClC,IAEG,CAAE0B,OAAMf,SG5CSyB,CADTvC,EAAMG,QACb0B,EAAR,EAAQA,KAAMf,EAAd,EAAcA,MAEd,OAAIA,EAAc,+CAAU0B,KAAKC,UAAU3B,MAC/B,MAARe,EAAqB,qDAGvB,sBAAK5B,UAAU,OAAf,UACI,cAAC,EAAD,CAAY4B,KAAMA,IAClB,cAAC,EAAD,CAAYV,WAAYU,EAAKV,gBCDtBuB,MATf,WACE,OACE,sBAAKzC,UAAU,MAAf,UACE,cAACgC,EAAD,CAAM9B,OAAQ,MACd,cAAC,EAAD,QCKSwC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b4247109.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ChallengeEditor.css\";\n\nexport default function ChallengeEditor(props: { challengeId?: string }): JSX.Element {\n  return <div className=\"plus\">+</div>;\n}\n","import { useEffect, useState } from \"react\";\n\nexport type ChallengeState = \"open\" | \"closed\" | \"hidden\";\n\nexport interface Challenge {\n  title?: string;\n  description?: string;\n  maxPoints: number;\n  reachedPoints: number;\n  minClosed: number;\n  state: ChallengeState;\n}\n\nexport interface Data {\n  gameId: number;\n  gameTitle: string;\n  totalReachedPoints: number;\n  totalMaxPoints: number;\n  challenges: Challenge[];\n}\n\nasync function getData(gameId: string): Promise<Data> {\n  console.log(`${window.location.hostname === \"localhost\" ? \"http://localhost:3000\" : \"\"}/api/game/${gameId}`);\n  const res = await fetch(`${window.location.hostname === \"localhost\" ? \"http://localhost:3000\" : \"\"}/api/game/${gameId}`);\n  if (res.status === 200) return res.json();\n  console.error(`Fetch error: ${res.status} ${res.statusText} ${res.text()}`);\n  throw new Error(res.statusText);\n}\n\nexport function useData(gameId?: string): { data?: Data; error?: any } {\n  const [data, setData] = useState<Data | undefined>(undefined);\n  const [error, setError] = useState<any | undefined>(undefined);\n\n  useEffect(() => {\n    if (gameId == null) {\n      setData(undefined);\n      setError(new Error(\"GameId Not Given\"));\n    } else {\n      (async () => {\n        try {\n          setData(await getData(gameId));\n          setError(undefined);\n        } catch (err) {\n          console.log(err);\n          setData(undefined);\n          setError(\"some error\");\n        }\n      })();\n    }\n  }, [gameId]);\n\n  return { data, error };\n}\n","import React from \"react\";\nimport { Challenge } from \"../api/useData\";\nimport \"./Challenges.css\";\n\nexport default function Challenges(props: { challenges: Challenge[] }): JSX.Element {\n  return (\n    <div className=\"challengeList\">\n      {props.challenges.map((challenge, index) => (\n        <div key={index} className={`challengeBox ${challenge.state}`}>\n          <div className=\"challengeHeader\">\n            <div className=\"challengeTitle\">{challenge.title ?? \"???\"}</div>\n            <div className=\"challengePoints\">\n              {\n                challenge.state === \"hidden\" ? challenge.maxPoints : `${challenge.reachedPoints} / ${challenge.maxPoints}`\n              }\n            </div>\n          </div>\n          <div className=\"challengeDescription\">{challenge.description ?? \"???\"}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Data } from \"../api/useData\";\nimport \"./GameHeader.css\";\n\nexport default function GameHeader(props: { data: Data }): JSX.Element {\n  return (\n    <div className=\"gameHeader\">\n      <div className=\"gameHeaderTitle\">{props.data.gameTitle}</div>\n  <div className=\"gameHeaderPoints\">{props.data.totalReachedPoints} / {props.data.totalMaxPoints}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useData } from \"../api/useData\";\nimport Challenges from \"./Challenges\";\nimport GameHeader from \"./GameHeader\";\n\nexport default function Game(props: { gameId: string }): JSX.Element {\n  const gameId = props.gameId;\n  const { data, error } = useData(gameId);\n\n  if (error) return <>Error: {JSON.stringify(error)}</>;\n  if (data == null) return <>No Data Found</>;\n\n  return (\n    <div className=\"Game\">\n        <GameHeader data={data} />\n        <Challenges challenges={data.challenges} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport ChallengeEditor from \"./components/ChallengeEditor\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game gameId={\"1\"} />\n      <ChallengeEditor />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}